var dataJson = {"arch":{"ispc":false,"isunix":true,"ismac":false},"build":"triplex_12B","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"/home/lukeubun/PhdProject/lm_challenges/original_models/0_triplex/triplex_12B_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: ert_main.c\n *\n * Code generated for Simulink model 'triplex_12B'.\n *\n * Model version                  : 1.60\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n * C/C++ source code generated on : Fri Nov  1 12:49:54 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM 10\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#include <stddef.h>\n#include <stdio.h>            /* This example main program uses printf/fflush */\n#include \"triplex_12B.h\"               /* Model header file */\n\n/*\n * Associating rt_OneStep with a real-time clock or interrupt service routine\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\n * always associated with the base rate of the model.  Subrates are managed\n * by the base rate from inside the generated code.  Enabling/disabling\n * interrupts and floating point context switches are target specific.  This\n * example code indicates where these should take place relative to executing\n * the generated code step function.  Overrun behavior should be tailored to\n * your application needs.  This example simply sets an error status in the\n * real-time model and returns from rt_OneStep.\n */\nvoid rt_OneStep(void);\nvoid rt_OneStep(void)\n{\n  static boolean_T OverrunFlag = false;\n\n  /* Disable interrupts here */\n\n  /* Check for overrun */\n  if (OverrunFlag) {\n    return;\n  }\n\n  OverrunFlag = true;\n\n  /* Save FPU context here (if necessary) */\n  /* Re-enable timer or interrupt here */\n  /* Set model inputs here */\n\n  /* Step the model */\n  triplex_12B_step();\n\n  /* Get model outputs here */\n\n  /* Indicate task complete */\n  OverrunFlag = false;\n\n  /* Disable interrupts here */\n  /* Restore FPU context here (if necessary) */\n  /* Enable interrupts here */\n}\n\n/*\n * The example main function illustrates what is required by your\n * application code to initialize, execute, and terminate the generated code.\n * Attaching rt_OneStep to a real-time clock is target specific. This example\n * illustrates how you do this relative to initializing the model.\n */\nint_T main(int_T argc, const char *argv[])\n{\n  /* Unused arguments */\n  (void)(argc);\n  (void)(argv);\n\n  /* Initialize model */\n  triplex_12B_initialize();\n\n  /* Attach rt_OneStep to a timer or interrupt service routine with\n   * period 0.1 seconds (base rate of the model) here.\n   * The call syntax for rt_OneStep is\n   *\n   *  rt_OneStep();\n   */\n  printf(\"Warning: The simulation will run forever. \"\n         \"Generated ERT main won't simulate model step behavior. \"\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\n  fflush((NULL));\n  while (1) {\n    /*  Perform application tasks here */\n  }\n\n  /* The option 'Remove error status field in real-time model data structure'\n   * is selected, therefore the following code does not need to execute.\n   */\n  return 0;\n}\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"triplex_12B.c","type":"source","group":"model","path":"/home/lukeubun/PhdProject/lm_challenges/original_models/0_triplex/triplex_12B_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: triplex_12B.c\n *\n * Code generated for Simulink model 'triplex_12B'.\n *\n * Model version                  : 1.60\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n * C/C++ source code generated on : Fri Nov  1 12:49:54 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM 10\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#include \"triplex_12B.h\"\n#include <math.h>\n#include \"rtwtypes.h\"\n\n/* Block signals and states (default storage) */\nDW rtDW;\n\n/* External inputs (root inport signals with default storage) */\nExtU rtU;\n\n/* External outputs (root outports fed by signals with default storage) */\nExtY rtY;\n\n/* Model step function */\nvoid triplex_12B_step(void)\n{\n  real_T rtb_Abs1;\n  real_T rtb_Switch;\n  int32_T rtb_Delay1_idx_0;\n  int32_T rtb_Delay1_idx_1;\n  int32_T rtb_Delay1_idx_2;\n  boolean_T rtb_LogicalOperator6;\n  boolean_T rtb_RelationalOperator1;\n  boolean_T rtb_RelationalOperator2;\n  boolean_T rtb_RelationalOperator3;\n  boolean_T rtb_RelationalOperator4;\n  boolean_T rtb_RelationalOperator4_tmp;\n  boolean_T rtb_RelationalOperator4_tmp_0;\n  boolean_T rtb_RelationalOperator4_tmp_1;\n  boolean_T rtb_RelationalOperator4_tmp_2;\n  boolean_T rtb_RelationalOperator_o;\n\n  /* Delay: '<S1>/Delay1' */\n  rtb_Delay1_idx_0 = rtDW.Delay1_DSTATE[0];\n  rtb_Delay1_idx_1 = rtDW.Delay1_DSTATE[1];\n  rtb_Delay1_idx_2 = rtDW.Delay1_DSTATE[2];\n\n  /* RelationalOperator: '<S3>/Relational Operator3' */\n  rtb_RelationalOperator3 = (rtb_Delay1_idx_0 > 0);\n\n  /* RelationalOperator: '<S3>/Relational Operator' incorporates:\n   *  Abs: '<S3>/Abs'\n   *  Inport: '<Root>/Tlevel'\n   *  Inport: '<Root>/ia'\n   *  Inport: '<Root>/ib'\n   *  Sum: '<S3>/Sum'\n   */\n  rtb_RelationalOperator_o = (fabs(rtU.ia - rtU.ib) > rtU.Tlevel);\n\n  /* RelationalOperator: '<S3>/Relational Operator1' incorporates:\n   *  Abs: '<S3>/Abs1'\n   *  Inport: '<Root>/Tlevel'\n   *  Inport: '<Root>/ib'\n   *  Inport: '<Root>/ic'\n   *  Sum: '<S3>/Sum1'\n   */\n  rtb_RelationalOperator1 = (fabs(rtU.ib - rtU.ic) > rtU.Tlevel);\n\n  /* RelationalOperator: '<S3>/Relational Operator2' incorporates:\n   *  Abs: '<S3>/Abs2'\n   *  Inport: '<Root>/Tlevel'\n   *  Inport: '<Root>/ia'\n   *  Inport: '<Root>/ic'\n   *  Sum: '<S3>/Sum2'\n   */\n  rtb_RelationalOperator2 = (fabs(rtU.ia - rtU.ic) > rtU.Tlevel);\n\n  /* Logic: '<S16>/Logical Operator5' incorporates:\n   *  Logic: '<S13>/Logical Operator12'\n   *  Logic: '<S14>/Logical Operator24'\n   */\n  rtb_RelationalOperator4_tmp = !rtb_RelationalOperator2;\n\n  /* Logic: '<S16>/Logical Operator2' incorporates:\n   *  Logic: '<S13>/Logical Operator10'\n   */\n  rtb_RelationalOperator4_tmp_0 = !rtb_RelationalOperator1;\n\n  /* Logic: '<S16>/Logical Operator1' incorporates:\n   *  Logic: '<S13>/Logical Operator16'\n   */\n  rtb_RelationalOperator4_tmp_1 = !rtb_RelationalOperator_o;\n\n  /* Logic: '<S16>/Logical Operator3' incorporates:\n   *  Logic: '<S13>/Logical Operator22'\n   *  Logic: '<S16>/Logical Operator1'\n   *  Logic: '<S16>/Logical Operator2'\n   */\n  rtb_RelationalOperator4_tmp_2 = (rtb_RelationalOperator4_tmp_1 &&\n    rtb_RelationalOperator4_tmp_0);\n\n  /* Logic: '<S16>/Logical Operator4' incorporates:\n   *  Logic: '<S16>/Logical Operator3'\n   *  Logic: '<S16>/Logical Operator5'\n   */\n  rtb_RelationalOperator4 = (rtb_RelationalOperator4_tmp_2 &&\n    rtb_RelationalOperator4_tmp);\n\n  /* Logic: '<S16>/Logical Operator6' incorporates:\n   *  Logic: '<S16>/Logical Operator7'\n   */\n  rtb_LogicalOperator6 = ((!rtb_RelationalOperator3) && rtb_RelationalOperator4);\n\n  /* Logic: '<S16>/Logical Operator13' */\n  rtb_RelationalOperator3 = (rtb_RelationalOperator4 && rtb_RelationalOperator3);\n\n  /* Logic: '<S13>/Logical Operator11' incorporates:\n   *  Logic: '<S14>/Logical Operator29'\n   */\n  rtb_RelationalOperator4_tmp_0 = (rtb_RelationalOperator_o &&\n    rtb_RelationalOperator4_tmp_0);\n\n  /* Logic: '<S13>/Logical Operator15' incorporates:\n   *  Logic: '<S14>/Logical Operator35'\n   */\n  rtb_RelationalOperator4_tmp_1 = (rtb_RelationalOperator4_tmp_1 &&\n    rtb_RelationalOperator1);\n\n  /* RelationalOperator: '<S3>/Relational Operator4' incorporates:\n   *  Inport: '<Root>/PClimit'\n   */\n  rtb_RelationalOperator4 = (rtb_Delay1_idx_0 > rtU.PClimit);\n\n  /* If: '<S2>/If' incorporates:\n   *  Logic: '<S13>/Logical Operator11'\n   *  Logic: '<S13>/Logical Operator14'\n   *  Logic: '<S13>/Logical Operator15'\n   *  Logic: '<S13>/Logical Operator17'\n   *  Logic: '<S13>/Logical Operator21'\n   *  Logic: '<S13>/Logical Operator8'\n   *  Logic: '<S13>/Logical Operator9'\n   *  Logic: '<S14>/Logical Operator19'\n   *  Logic: '<S14>/Logical Operator25'\n   *  Logic: '<S14>/Logical Operator26'\n   *  Logic: '<S14>/Logical Operator27'\n   *  Logic: '<S14>/Logical Operator28'\n   *  Logic: '<S14>/Logical Operator30'\n   *  Logic: '<S14>/Logical Operator31'\n   *  Logic: '<S14>/Logical Operator34'\n   *  Logic: '<S14>/Logical Operator36'\n   *  Logic: '<S15>/Logical Operator4'\n   *  Logic: '<S17>/Logical Operator1'\n   *  Logic: '<S17>/Logical Operator19'\n   *  Logic: '<S17>/Logical Operator28'\n   */\n  if (rtb_LogicalOperator6) {\n    /* Outputs for IfAction SubSystem: '<S2>/Act1' incorporates:\n     *  ActionPort: '<S5>/Action Port'\n     */\n    /* Merge: '<S2>/Merge' incorporates:\n     *  Constant: '<S5>/Constant1'\n     *  SignalConversion: '<S5>/Signal Conversion'\n     */\n    rtDW.Merge_e[0] = 0;\n    rtDW.Merge_e[1] = rtb_Delay1_idx_1;\n    rtDW.Merge_e[2] = rtb_Delay1_idx_2;\n\n    /* End of Outputs for SubSystem: '<S2>/Act1' */\n  } else if (rtb_RelationalOperator3) {\n    /* Outputs for IfAction SubSystem: '<S2>/Act2' incorporates:\n     *  ActionPort: '<S6>/Action Port'\n     */\n    /* Merge: '<S2>/Merge' incorporates:\n     *  Constant: '<S6>/Constant1'\n     *  SignalConversion: '<S6>/Signal Conversion'\n     *  Sum: '<S6>/Sum'\n     */\n    rtDW.Merge_e[0] = rtb_Delay1_idx_0 - 1;\n    rtDW.Merge_e[1] = rtb_Delay1_idx_1;\n    rtDW.Merge_e[2] = rtb_Delay1_idx_2;\n\n    /* End of Outputs for SubSystem: '<S2>/Act2' */\n  } else if ((rtb_RelationalOperator4_tmp_0 && rtb_RelationalOperator4_tmp) ||\n             (rtb_RelationalOperator4_tmp && rtb_RelationalOperator4_tmp_1) ||\n             (rtb_RelationalOperator2 && rtb_RelationalOperator4_tmp_2)) {\n    /* Outputs for IfAction SubSystem: '<S2>/Act3' incorporates:\n     *  ActionPort: '<S7>/Action Port'\n     */\n    /* Merge: '<S2>/Merge' incorporates:\n     *  SignalConversion generated from: '<S7>/state'\n     */\n    rtDW.Merge_e[0] = rtb_Delay1_idx_0;\n    rtDW.Merge_e[1] = rtb_Delay1_idx_1;\n    rtDW.Merge_e[2] = rtb_Delay1_idx_2;\n\n    /* End of Outputs for SubSystem: '<S2>/Act3' */\n  } else {\n    /* Logic: '<S14>/Logical Operator26' incorporates:\n     *  Logic: '<S14>/Logical Operator32'\n     *  Logic: '<S14>/Logical Operator37'\n     */\n    rtb_RelationalOperator3 = !rtb_RelationalOperator4;\n\n    /* Logic: '<S14>/Logical Operator20' incorporates:\n     *  Logic: '<S15>/Logical Operator3'\n     */\n    rtb_RelationalOperator_o = (rtb_RelationalOperator_o &&\n      rtb_RelationalOperator1);\n\n    /* Logic: '<S14>/Logical Operator25' incorporates:\n     *  Logic: '<S14>/Logical Operator20'\n     *  Logic: '<S17>/Logical Operator25'\n     */\n    rtb_RelationalOperator4_tmp = (rtb_RelationalOperator_o &&\n      rtb_RelationalOperator4_tmp);\n\n    /* Logic: '<S14>/Logical Operator31' incorporates:\n     *  Logic: '<S17>/Logical Operator31'\n     */\n    rtb_RelationalOperator4_tmp_0 = (rtb_RelationalOperator4_tmp_0 &&\n      rtb_RelationalOperator2);\n\n    /* Logic: '<S14>/Logical Operator36' incorporates:\n     *  Logic: '<S17>/Logical Operator3'\n     */\n    rtb_RelationalOperator4_tmp_1 = (rtb_RelationalOperator4_tmp_1 &&\n      rtb_RelationalOperator2);\n    if ((rtb_RelationalOperator4_tmp && rtb_RelationalOperator3) ||\n        (rtb_RelationalOperator4_tmp_0 && rtb_RelationalOperator3) ||\n        (rtb_RelationalOperator4_tmp_1 && rtb_RelationalOperator3)) {\n      /* Outputs for IfAction SubSystem: '<S2>/Act4' incorporates:\n       *  ActionPort: '<S8>/Action Port'\n       */\n      /* Merge: '<S2>/Merge' incorporates:\n       *  Constant: '<S8>/Constant1'\n       *  SignalConversion: '<S8>/Signal Conversion'\n       *  Sum: '<S8>/Sum'\n       *  Sum: '<S8>/Sum1'\n       */\n      rtDW.Merge_e[0] = rtb_Delay1_idx_0 + 1;\n      rtDW.Merge_e[1] = rtb_Delay1_idx_1 + 1;\n      rtDW.Merge_e[2] = rtb_Delay1_idx_2;\n\n      /* End of Outputs for SubSystem: '<S2>/Act4' */\n    } else if (rtb_RelationalOperator4_tmp && rtb_RelationalOperator4) {\n      /* Outputs for IfAction SubSystem: '<S2>/Act5' incorporates:\n       *  ActionPort: '<S9>/Action Port'\n       */\n      /* Merge: '<S2>/Merge' incorporates:\n       *  Constant: '<S9>/Constant'\n       *  Constant: '<S9>/Constant1'\n       *  SignalConversion: '<S9>/Signal Conversion'\n       */\n      rtDW.Merge_e[0] = 0;\n      rtDW.Merge_e[1] = rtb_Delay1_idx_1;\n      rtDW.Merge_e[2] = 2;\n\n      /* End of Outputs for SubSystem: '<S2>/Act5' */\n    } else if (rtb_RelationalOperator4_tmp_0 && rtb_RelationalOperator4) {\n      /* Outputs for IfAction SubSystem: '<S2>/Act6' incorporates:\n       *  ActionPort: '<S10>/Action Port'\n       */\n      /* Merge: '<S2>/Merge' incorporates:\n       *  Constant: '<S10>/Constant'\n       *  Constant: '<S10>/Constant1'\n       *  SignalConversion: '<S10>/Signal Conversion'\n       */\n      rtDW.Merge_e[0] = 0;\n      rtDW.Merge_e[1] = rtb_Delay1_idx_1;\n      rtDW.Merge_e[2] = 4;\n\n      /* End of Outputs for SubSystem: '<S2>/Act6' */\n    } else if (rtb_RelationalOperator4_tmp_1 && rtb_RelationalOperator4) {\n      /* Outputs for IfAction SubSystem: '<S2>/Act7' incorporates:\n       *  ActionPort: '<S11>/Action Port'\n       */\n      /* Merge: '<S2>/Merge' incorporates:\n       *  Constant: '<S11>/Constant'\n       *  Constant: '<S11>/Constant1'\n       *  SignalConversion: '<S11>/Signal Conversion'\n       */\n      rtDW.Merge_e[0] = 0;\n      rtDW.Merge_e[1] = rtb_Delay1_idx_1;\n      rtDW.Merge_e[2] = 1;\n\n      /* End of Outputs for SubSystem: '<S2>/Act7' */\n    } else if (rtb_RelationalOperator_o && rtb_RelationalOperator2) {\n      /* Outputs for IfAction SubSystem: '<S2>/Act8' incorporates:\n       *  ActionPort: '<S12>/Action Port'\n       */\n      /* Merge: '<S2>/Merge' incorporates:\n       *  Constant: '<S12>/Constant1'\n       *  SignalConversion: '<S12>/Signal Conversion'\n       *  Sum: '<S12>/Sum1'\n       */\n      rtDW.Merge_e[0] = rtb_Delay1_idx_0;\n      rtDW.Merge_e[1] = rtb_Delay1_idx_1 + 1;\n      rtDW.Merge_e[2] = rtb_Delay1_idx_2;\n\n      /* End of Outputs for SubSystem: '<S2>/Act8' */\n    }\n  }\n\n  /* End of If: '<S2>/If' */\n\n  /* Outport: '<Root>/PC' */\n  rtY.PC = rtDW.Merge_e[0];\n\n  /* Outport: '<Root>/TC' */\n  rtY.TC = rtDW.Merge_e[1];\n\n  /* Outport: '<Root>/FC' */\n  rtY.FC = rtDW.Merge_e[2];\n\n  /* If: '<S4>/If' */\n  if (rtDW.Merge_e[2] == 0) {\n    /* Outputs for IfAction SubSystem: '<S4>/No-Fail' incorporates:\n     *  ActionPort: '<S18>/Action Port'\n     */\n    /* Product: '<S22>/Divide' incorporates:\n     *  Constant: '<S22>/Constant'\n     *  Inport: '<Root>/ia'\n     *  Inport: '<Root>/ib'\n     *  Inport: '<Root>/ic'\n     *  Sum: '<S22>/Sum'\n     *  Sum: '<S22>/Sum1'\n     */\n    rtb_Abs1 = ((rtU.ia + rtU.ib) + rtU.ic) / 3.0;\n\n    /* Switch: '<S23>/Switch' incorporates:\n     *  Abs: '<S23>/Abs'\n     *  Abs: '<S23>/Abs1'\n     *  Inport: '<Root>/ia'\n     *  Inport: '<Root>/ib'\n     *  RelationalOperator: '<S23>/Relational Operator'\n     *  Sum: '<S23>/Sum'\n     *  Sum: '<S23>/Sum1'\n     */\n    if (fabs(rtU.ia - rtb_Abs1) > fabs(rtU.ib - rtb_Abs1)) {\n      rtb_Switch = rtU.ib;\n    } else {\n      rtb_Switch = rtU.ia;\n    }\n\n    /* End of Switch: '<S23>/Switch' */\n\n    /* Switch: '<S24>/Switch' incorporates:\n     *  Abs: '<S24>/Abs'\n     *  Abs: '<S24>/Abs1'\n     *  Inport: '<Root>/ic'\n     *  RelationalOperator: '<S24>/Relational Operator'\n     *  Sum: '<S24>/Sum'\n     *  Sum: '<S24>/Sum1'\n     */\n    if (fabs(rtb_Switch - rtb_Abs1) > fabs(rtU.ic - rtb_Abs1)) {\n      /* Merge: '<S4>/Merge' */\n      rtDW.Merge = rtU.ic;\n    } else {\n      /* Merge: '<S4>/Merge' */\n      rtDW.Merge = rtb_Switch;\n    }\n\n    /* End of Switch: '<S24>/Switch' */\n    /* End of Outputs for SubSystem: '<S4>/No-Fail' */\n  } else if (rtDW.Merge_e[2] == 1) {\n    /* Outputs for IfAction SubSystem: '<S4>/Single-BranchC-Fail' incorporates:\n     *  ActionPort: '<S21>/Action Port'\n     */\n    /* Merge: '<S4>/Merge' incorporates:\n     *  Constant: '<S27>/Constant'\n     *  Inport: '<Root>/ia'\n     *  Inport: '<Root>/ib'\n     *  Product: '<S27>/Divide'\n     *  Sum: '<S27>/Sum'\n     */\n    rtDW.Merge = (rtU.ia + rtU.ib) / 2.0;\n\n    /* End of Outputs for SubSystem: '<S4>/Single-BranchC-Fail' */\n  } else if (rtDW.Merge_e[2] == 2) {\n    /* Outputs for IfAction SubSystem: '<S4>/Single-BranchB-Fail' incorporates:\n     *  ActionPort: '<S20>/Action Port'\n     */\n    /* Merge: '<S4>/Merge' incorporates:\n     *  Constant: '<S26>/Constant'\n     *  Inport: '<Root>/ia'\n     *  Inport: '<Root>/ic'\n     *  Product: '<S26>/Divide'\n     *  Sum: '<S26>/Sum'\n     */\n    rtDW.Merge = (rtU.ia + rtU.ic) / 2.0;\n\n    /* End of Outputs for SubSystem: '<S4>/Single-BranchB-Fail' */\n  } else if (rtDW.Merge_e[2] == 4) {\n    /* Outputs for IfAction SubSystem: '<S4>/Single-BranchA-Fail' incorporates:\n     *  ActionPort: '<S19>/Action Port'\n     */\n    /* Merge: '<S4>/Merge' incorporates:\n     *  Constant: '<S25>/Constant'\n     *  Inport: '<Root>/ib'\n     *  Inport: '<Root>/ic'\n     *  Product: '<S25>/Divide'\n     *  Sum: '<S25>/Sum'\n     */\n    rtDW.Merge = (rtU.ib + rtU.ic) / 2.0;\n\n    /* End of Outputs for SubSystem: '<S4>/Single-BranchA-Fail' */\n  }\n\n  /* End of If: '<S4>/If' */\n\n  /* Outport: '<Root>/sel_val' */\n  rtY.sel_val = rtDW.Merge;\n\n  /* Update for Delay: '<S1>/Delay1' */\n  rtDW.Delay1_DSTATE[0] = rtDW.Merge_e[0];\n  rtDW.Delay1_DSTATE[1] = rtDW.Merge_e[1];\n  rtDW.Delay1_DSTATE[2] = rtDW.Merge_e[2];\n}\n\n/* Model initialize function */\nvoid triplex_12B_initialize(void)\n{\n  /* (no initialization code required) */\n}\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"triplex_12B.h","type":"header","group":"model","path":"/home/lukeubun/PhdProject/lm_challenges/original_models/0_triplex/triplex_12B_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: triplex_12B.h\n *\n * Code generated for Simulink model 'triplex_12B'.\n *\n * Model version                  : 1.60\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n * C/C++ source code generated on : Fri Nov  1 12:49:54 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM 10\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#ifndef triplex_12B_h_\n#define triplex_12B_h_\n#ifndef triplex_12B_COMMON_INCLUDES_\n#define triplex_12B_COMMON_INCLUDES_\n#include \"rtwtypes.h\"\n#endif                                 /* triplex_12B_COMMON_INCLUDES_ */\n\n/* Block signals and states (default storage) for system '<Root>' */\ntypedef struct {\n  real_T Merge;                        /* '<S4>/Merge' */\n  int32_T Merge_e[3];                  /* '<S2>/Merge' */\n  int32_T Delay1_DSTATE[3];            /* '<S1>/Delay1' */\n} DW;\n\n/* External inputs (root inport signals with default storage) */\ntypedef struct {\n  real_T ia;                           /* '<Root>/ia' */\n  real_T ib;                           /* '<Root>/ib' */\n  real_T ic;                           /* '<Root>/ic' */\n  real_T Tlevel;                       /* '<Root>/Tlevel' */\n  int32_T PClimit;                     /* '<Root>/PClimit' */\n} ExtU;\n\n/* External outputs (root outports fed by signals with default storage) */\ntypedef struct {\n  int32_T PC;                          /* '<Root>/PC' */\n  int32_T TC;                          /* '<Root>/TC' */\n  int32_T FC;                          /* '<Root>/FC' */\n  real_T sel_val;                      /* '<Root>/sel_val' */\n} ExtY;\n\n/* Block signals and states (default storage) */\nextern DW rtDW;\n\n/* External inputs (root inport signals with default storage) */\nextern ExtU rtU;\n\n/* External outputs (root outports fed by signals with default storage) */\nextern ExtY rtY;\n\n/* Model entry point functions */\nextern void triplex_12B_initialize(void);\nextern void triplex_12B_step(void);\n\n/*-\n * The generated code includes comments that allow you to trace directly\n * back to the appropriate location in the model.  The basic format\n * is <system>/block_name, where system is the system number (uniquely\n * assigned by Simulink) and block_name is the name of the block.\n *\n * Use the MATLAB hilite_system command to trace the generated code back\n * to the model.  For example,\n *\n * hilite_system('<S3>')    - opens system 3\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\n *\n * Here is the system hierarchy for this model\n *\n * '<Root>' : 'triplex_12B'\n * '<S1>'   : 'triplex_12B/TriplexMonitorNoFail'\n * '<S2>'   : 'triplex_12B/TriplexMonitorNoFail/Actions'\n * '<S3>'   : 'triplex_12B/TriplexMonitorNoFail/Conditions'\n * '<S4>'   : 'triplex_12B/TriplexMonitorNoFail/Output'\n * '<S5>'   : 'triplex_12B/TriplexMonitorNoFail/Actions/Act1'\n * '<S6>'   : 'triplex_12B/TriplexMonitorNoFail/Actions/Act2'\n * '<S7>'   : 'triplex_12B/TriplexMonitorNoFail/Actions/Act3'\n * '<S8>'   : 'triplex_12B/TriplexMonitorNoFail/Actions/Act4'\n * '<S9>'   : 'triplex_12B/TriplexMonitorNoFail/Actions/Act5'\n * '<S10>'  : 'triplex_12B/TriplexMonitorNoFail/Actions/Act6'\n * '<S11>'  : 'triplex_12B/TriplexMonitorNoFail/Actions/Act7'\n * '<S12>'  : 'triplex_12B/TriplexMonitorNoFail/Actions/Act8'\n * '<S13>'  : 'triplex_12B/TriplexMonitorNoFail/Actions/Action3'\n * '<S14>'  : 'triplex_12B/TriplexMonitorNoFail/Actions/Action4'\n * '<S15>'  : 'triplex_12B/TriplexMonitorNoFail/Actions/Action8'\n * '<S16>'  : 'triplex_12B/TriplexMonitorNoFail/Actions/Actions1_2'\n * '<S17>'  : 'triplex_12B/TriplexMonitorNoFail/Actions/Actions5_6_7'\n * '<S18>'  : 'triplex_12B/TriplexMonitorNoFail/Output/No-Fail'\n * '<S19>'  : 'triplex_12B/TriplexMonitorNoFail/Output/Single-BranchA-Fail'\n * '<S20>'  : 'triplex_12B/TriplexMonitorNoFail/Output/Single-BranchB-Fail'\n * '<S21>'  : 'triplex_12B/TriplexMonitorNoFail/Output/Single-BranchC-Fail'\n * '<S22>'  : 'triplex_12B/TriplexMonitorNoFail/Output/No-Fail/Avg3'\n * '<S23>'  : 'triplex_12B/TriplexMonitorNoFail/Output/No-Fail/choose'\n * '<S24>'  : 'triplex_12B/TriplexMonitorNoFail/Output/No-Fail/choose1'\n * '<S25>'  : 'triplex_12B/TriplexMonitorNoFail/Output/Single-BranchA-Fail/Avg2'\n * '<S26>'  : 'triplex_12B/TriplexMonitorNoFail/Output/Single-BranchB-Fail/Avg2'\n * '<S27>'  : 'triplex_12B/TriplexMonitorNoFail/Output/Single-BranchC-Fail/Avg2'\n */\n#endif                                 /* triplex_12B_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"/home/lukeubun/PhdProject/lm_challenges/original_models/0_triplex/triplex_12B_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: rtwtypes.h\n *\n * Code generated for Simulink model 'triplex_12B'.\n *\n * Model version                  : 1.60\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n * C/C++ source code generated on : Fri Nov  1 12:49:54 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM 10\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#ifndef RTWTYPES_H\n#define RTWTYPES_H\n\n/* Logical type definitions */\n#if (!defined(__cplusplus))\n#ifndef false\n#define false                          (0U)\n#endif\n\n#ifndef true\n#define true                           (1U)\n#endif\n#endif\n\n/*=======================================================================*\n * Target hardware information\n *   Device type: ARM Compatible->ARM 10\n *   Number of bits:     char:   8    short:   16    int:  32\n *                       long:  32    long long:  64\n *                       native word size:  32\n *   Byte ordering: LittleEndian\n *   Signed integer division rounds to: Zero\n *   Shift right on a signed integer as arithmetic shift: on\n *=======================================================================*/\n\n/*=======================================================================*\n * Fixed width word size data types:                                     *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\n *=======================================================================*/\ntypedef signed char int8_T;\ntypedef unsigned char uint8_T;\ntypedef short int16_T;\ntypedef unsigned short uint16_T;\ntypedef int int32_T;\ntypedef unsigned int uint32_T;\ntypedef long long int64_T;\ntypedef unsigned long long uint64_T;\ntypedef float real32_T;\ntypedef double real64_T;\n\n/*===========================================================================*\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\n *===========================================================================*/\ntypedef double real_T;\ntypedef double time_T;\ntypedef unsigned char boolean_T;\ntypedef int int_T;\ntypedef unsigned int uint_T;\ntypedef unsigned long ulong_T;\ntypedef unsigned long long ulonglong_T;\ntypedef char char_T;\ntypedef unsigned char uchar_T;\ntypedef char_T byte_T;\n\n/*=======================================================================*\n * Min and Max:                                                          *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *=======================================================================*/\n#define MAX_int8_T                     ((int8_T)(127))\n#define MIN_int8_T                     ((int8_T)(-128))\n#define MAX_uint8_T                    ((uint8_T)(255U))\n#define MAX_int16_T                    ((int16_T)(32767))\n#define MIN_int16_T                    ((int16_T)(-32768))\n#define MAX_uint16_T                   ((uint16_T)(65535U))\n#define MAX_int32_T                    ((int32_T)(2147483647))\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\n\n/* Block D-Work pointer type */\ntypedef void * pointer_T;\n\n#endif                                 /* RTWTYPES_H */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};